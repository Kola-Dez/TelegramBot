import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlite import edit_proxy, edit_promo, DeliteNumber, whatActivation_id
import sqlite3 as sq
import json

filename = "option.txt"
with open(filename, 'r') as file:
    for line in file:
        if 'admin_id' in line:
            admin_id = line.split('=')[1].strip()
        elif 'API_KEY' in line:
            API_KEY = line.split('=')[1].strip().split()

admin_id = int(admin_id)
API_KEY = API_KEY[0]
print("admin_id =", admin_id)
print("API_KEY =", API_KEY)


from smsactivate.api import SMSActivateAPI
sa = SMSActivateAPI(API_KEY)

import random
from sqlite import db_start, create_profile, edit_number, get_all_proxies, delete_proxy, get_all_promo, delete_promo, profiles, prox1, prox2, delete_proxy1, prox3
async def on_startup(_):
    await db_start()


# –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot_token = '6187905230:AAEhtWIO4J2LE3CvmVCivOF40TX73c_sP2k'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

class SomeState(StatesGroup):
    Proxy = State()
    Promo = State()
    ProxyDelete = State()
    PromoDelete = State()
    SET_PROXY_ACCESS = State()
    Ogranich1 = State()
    Ogranich2 = State()
    Ogranich3 = State()
    DelNumber = State()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    profile = profiles(user_id)
    create_profile(user_id, username)
    user_id = message.from_user.id
    profile = profiles(user_id)
    if profile:
        if profile[3] == '–û—Ç–∫—Ä—ã—Ç–æ' and profile[4] != '–û—Ç–∫—Ä—ã—Ç–æ':
            await message.answer(f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\nüì≥–ù–æ–º–µ—Ä: {profile[1]}\n–ü—Ä–æ–º–æ–∫–æ–¥: {profile[2]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[3]}\n‚≠ï–ü—Ä–æ–º–æ–∫–æ–¥: {profile[5]}")
        elif profile[4] == '–û—Ç–∫—Ä—ã—Ç–æ':
            await message.answer(f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\nüì≥–ù–æ–º–µ—Ä: {profile[1]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[2]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[3]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[4]}\n‚≠ï–ü—Ä–æ–º–æ–∫–æ–¥: {profile[5]}")
        else:
            await message.answer(f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\nüì≥–ù–æ–º–µ—Ä: {profile[1]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[2]}\n‚≠ï–ü—Ä–æ–º–æ–∫–æ–¥: {profile[5]}")
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        Kode_button = types.KeyboardButton("–ö–û–î –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        Numb_button = types.KeyboardButton("–í–∑—è—Ç—å –Ω–æ–º–µ—Ä")
        proxy_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–∫—Å–∏")
        promo_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
        Home_button = types.KeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
        keyboard.add(Numb_button, Kode_button, proxy_button, promo_button, Home_button)
        await message.answer("‚≠ê–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å‚≠ê\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
    else:
        await message.answer("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ.‚ö†Ô∏è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–¥–∞—Ç—å –Ω–æ–º–µ—Ä"
@dp.message_handler(lambda message: message.text == '–í–∑—è—Ç—å –Ω–æ–º–µ—Ä')
async def handle_profile_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    profile = profiles(user_id)
    if profile and profile[1]:  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ worker
        await message.answer("‚ö†Ô∏è–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä.‚ö†Ô∏è")
    else:
        number = sa.getNumber(service='lf', country=11, freePrice ="true")
        try:
            edit_number(number['phone'], number['activation_id'], message.from_user.id)
            await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä: {number['phone']}")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            Kode_button = types.KeyboardButton("–ö–û–î –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
            Numb_button = types.KeyboardButton("–í–∑—è—Ç—å –Ω–æ–º–µ—Ä")
            proxy_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–∫—Å–∏")
            promo_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
            Home_button = types.KeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
            keyboard.add(Numb_button, Kode_button, proxy_button, promo_button, Home_button)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
        except:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            Kode_button = types.KeyboardButton("–ö–û–î –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
            Numb_button = types.KeyboardButton("–í–∑—è—Ç—å –Ω–æ–º–µ—Ä")
            proxy_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–∫—Å–∏")
            promo_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
            Home_button = types.KeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
            keyboard.add(Numb_button, Kode_button, proxy_button, promo_button, Home_button)
            # print(number['message'])
            await message.answer(f"‚ö†Ô∏è O—à–∏–±–∫–∞ ‚ö†Ô∏è", reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ2"
@dp.message_handler(lambda message: message.text == '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ')
async def handle_profile_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    profile = profiles(user_id)
    if profile:
        if profile[3] == '–û—Ç–∫—Ä—ã—Ç–æ' and profile[4] != '–û—Ç–∫—Ä—ã—Ç–æ':
            await message.answer(f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\nüì≥–ù–æ–º–µ—Ä: {profile[1]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[2]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[3]}\n‚≠ï–ü—Ä–æ–º–æ–∫–æ–¥: {profile[5]}")
        elif profile[4] == '–û—Ç–∫—Ä—ã—Ç–æ':
            await message.answer(f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\nüì≥–ù–æ–º–µ—Ä: {profile[1]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[2]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[3]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[4]}\n‚≠ï–ü—Ä–æ–º–æ–∫–æ–¥: {profile[5]}")
        else:
            await message.answer(f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\nüì≥–ù–æ–º–µ—Ä: {profile[1]}\nüåê–ü—Ä–æ–∫—Å–∏: {profile[2]}\n‚≠ï–ü—Ä–æ–º–æ–∫–æ–¥: {profile[5]}")
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        Kode_button = types.KeyboardButton("–ö–û–î –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        Numb_button = types.KeyboardButton("–í–∑—è—Ç—å –Ω–æ–º–µ—Ä")
        proxy_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–∫—Å–∏")
        promo_button = types.KeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
        Home_button = types.KeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
        keyboard.add(Numb_button, Kode_button, proxy_button, promo_button, Home_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
    else:
        await message.answer("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ.‚ö†Ô∏è")

#TEKE KEY    
@dp.message_handler(lambda message: message.text == '–ö–û–î –∞–∫—Ç–∏–≤–∞—Ü–∏–∏')
async def handle_profile_button(message: types.Message, state: FSMContext):
    activation_id = whatActivation_id(message.from_user.id)
    status = sa.getStatus(activation_id) # STATUS_WAIT_CODE
    if status == 'STATUS_WAIT_CODE':
        await message.answer("O–∂–∏–¥–∞–Ω–∏–µ —Å–º—Å")# {'status': 'STATUS_WAIT_CODE', 'message': '–û–∂–∏–¥–∞–Ω–∏–µ —Å–º—Å'}
    elif status == 'STATUS_OK':
        activations = sa.getActiveActivations()
        try:
            sorted_activations = sorted(activations["activeActivations"], key=lambda x: x["activationId"] == activation_id, reverse=True)
            for activation in sorted_activations:
                if activation['activationId'] == activation_id:
                    await message.answer(f"–í–∞—à –∫–æ–¥: {activation['smsCode']}")
        except:
            await message.answer(f"–í–∞—à –∫–æ–¥: {activations['error']}")
    else:
        await message.answer(f"–ö–æ–¥: {status}")
        
        



#TEKE PROXY
@dp.message_handler(lambda message: message.text == '–í–∑—è—Ç—å –ø—Ä–æ–∫—Å–∏')
async def handle_profile_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    profile = profiles(user_id)
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
    proxy_button_1 = types.InlineKeyboardButton(text="–ü—Ä–æ–∫—Å–∏ 1", callback_data="TakeProxyField_1")
    
    if profile[3] == '–û—Ç–∫—Ä—ã—Ç–æ' and profile[4] != '–û—Ç–∫—Ä—ã—Ç–æ':
        proxy_button_2 = types.InlineKeyboardButton(text="–ü—Ä–æ–∫—Å–∏ 2", callback_data="TakeProxyField_2")
        keyboard.add(proxy_button_1, proxy_button_2)
    elif profile[4] == '–û—Ç–∫—Ä—ã—Ç–æ':
        proxy_button_3 = types.InlineKeyboardButton(text="–ü—Ä–æ–∫—Å–∏ 3", callback_data="TakeProxyField_3")
        proxy_button_2 = types.InlineKeyboardButton(text="–ü—Ä–æ–∫—Å–∏ 2", callback_data="TakeProxyField_2")
        keyboard.add(proxy_button_1, proxy_button_2, proxy_button_3)
    else:
        keyboard.add(proxy_button_1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("TakeProxyField_"))
async def process_proxy_field(callback_query: types.CallbackQuery):
    db = sq.connect('new.db')
    cur = db.cursor()
    user_id = callback_query.from_user.id
    proxy_field = int(callback_query.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    profile = profiles(user_id)
    if profile[proxy_field + 1] == 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–∫—Å–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.answer("‚ö†Ô∏è–ù–µ–ª—å–∑—è‚ö†Ô∏è")
    else:
        proxy = cur.execute("SELECT proxy FROM proxys WHERE state = 0 LIMIT 1").fetchone()
        if proxy:
            proxy_value = proxy[0]
            cur.execute(f"UPDATE profile SET proxy_{proxy_field} = ? WHERE user_id = ?", (proxy_value, user_id))
            cur.execute("UPDATE proxys SET state = 1 WHERE proxy = ?", (proxy_value,))
            db.commit()
            await callback_query.answer(f"–í–∑—è—Ç –ø—Ä–æ–∫—Å–∏: {proxy_value} (–ü–æ–ª–µ: {proxy_field})")
        else:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.")


#TEKE PROMO
@dp.message_handler(lambda message: message.text == '–í–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥')
async def handle_profile_button(message: types.Message, state: FSMContext):
    db = sq.connect('new.db')
    cur = db.cursor()
    user_id = message.from_user.id
    profile = profiles(user_id)
    if profile[5]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø–æ–ª–µ promo_1 –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.")
    else:
        promo = cur.execute("SELECT promo FROM promocodes WHERE state = 0 LIMIT 1").fetchone()
        if promo:
            promo_value = promo[0]
            cur.execute("UPDATE profile SET promo = ? WHERE user_id = ?", (promo_value, user_id))
            cur.execute("UPDATE promocodes SET state = 1 WHERE promo = ?", (promo_value,))
            db.commit()
            await message.answer(f"–í–∑—è—Ç –ø—Ä–æ–º–æ–∫–æ–¥: {promo_value}")
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        
        
        
        
        
        


        
@dp.message_handler(lambda message: message.text == 'admin')
async def handle_number_button(message: types.Message, state: FSMContext):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    from admin import admin_panel
    await admin_panel(message)
    
    
#admin

#–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏
@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏')
async def handle_proxies_command(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏:")
        await SomeState.Proxy.set()

@dp.message_handler(state=SomeState.Proxy)
async def handle_proxy(message: types.Message, state: FSMContext):
    proxy = message.text
    edit_proxy(proxy)
    await message.answer("–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    
#–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥')
async def handle_proxies_command(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
        await SomeState.Promo.set()

@dp.message_handler(state=SomeState.Promo)
async def handle_promo(message: types.Message, state: FSMContext):
    promo = message.text
    edit_promo(promo)
    await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM





    
#ALL proxy
@dp.message_handler(lambda message: message.text == '–í—Å–µ –ø—Ä–æ–∫—Å–∏')
async def handle_proxies_command(message: types.Message):
    if message.from_user.id == admin_id:
        await get_all_proxies(message)

#ALL proxy
@dp.message_handler(lambda message: message.text == '–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
async def handle_proxies_command(message: types.Message):
    if message.from_user.id == admin_id:
        await get_all_promo(message)




#–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏')
async def handle_proxies_command(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await SomeState.ProxyDelete.set() 

@dp.message_handler(state=SomeState.ProxyDelete)
async def handle_delete_proxy(message: types.Message, state: FSMContext):
    proxy = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    if proxy:
        what = delete_proxy(proxy)
        if what == 'error':
            await message.answer(f"–ü—Ä–æ–∫—Å–∏ {proxy} –Ω–µ –Ω–∞–π–¥–µ–Ω.")   
        else:
            await message.answer(f"–ü—Ä–æ–∫—Å–∏ {proxy} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("‚ö†Ô∏è–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.‚ö†Ô∏è")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM


#–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ 
@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥')
async def handle_proxies_command(message: types.Message):   
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await SomeState.PromoDelete.set()

@dp.message_handler(state=SomeState.PromoDelete)
async def handle_delete_proxy(message: types.Message, state: FSMContext):
    promo = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    if promo:
        what = delete_promo(promo)
        if what == 'error':
            await message.answer(f"–ø—Ä–æ–º–æ–∫–æ–¥ {promo} –Ω–µ –Ω–∞–π–¥–µ–Ω.") 
        else:
            await message.answer(f"–ø—Ä–æ–º–æ–∫–æ–¥ {promo} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM


#–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è    
@dp.message_handler(lambda message: message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏')
async def handle_proxies_command(message: types.Message):   
    if message.from_user.id == admin_id:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        proxy_button = types.KeyboardButton(text="–í—ã–¥–∞—Ç—å 1 –ø—Ä–æ–∫—Å–∏")
        promo_button = types.KeyboardButton(text="–í—ã–¥–∞—Ç—å 2 –ø—Ä–æ–∫—Å–∏")
        Home_button = types.KeyboardButton(text="–í—ã–¥–∞—Ç—å 3 –ø—Ä–æ–∫—Å–∏")
        keyboard.add(proxy_button, promo_button, Home_button)
        await message.answer("–ö–∞–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–±–µ—Ä–∏—Ç–µ", reply_markup=keyboard)
#1
@dp.message_handler(lambda message: message.text == '–í—ã–¥–∞—Ç—å 1 –ø—Ä–æ–∫—Å–∏')
async def handle_proxies_command(message: types.Message):   
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ \"id\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {1 –ø—Ä–æ–∫—Å–∏}:")
        await SomeState.Ogranich1.set()
        
@dp.message_handler(state=SomeState.Ogranich1)
async def handle_delete_proxy1(message: types.Message, state: FSMContext):
    db = sq.connect('new.db')
    cur = db.cursor()
    user_id = message.text
    what = cur.execute("SELECT 1 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
    if what != None:
        proxy_1 = cur.execute("SELECT proxy_1 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_1[0])  # Use proxy_1[0] to get the value from the fetched result
        proxy_2 = cur.execute("SELECT proxy_2 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_2[0])  # Use proxy_2[0] to get the value from the fetched result
        proxy_3 = cur.execute("SELECT proxy_3 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_3[0])  # Use proxy_3[0] to get the value from the fetched result
        prox1(user_id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        proxy_button = types.KeyboardButton(text="admin")
        keyboard.add(proxy_button)
        query = "SELECT user_id, number, proxy_1, proxy_2, proxy_3, promo FROM profile WHERE user_id = ?"
        user_data = cur.execute(query, (user_id,)).fetchone()
        user_list = (f"ID: {user_data[0]}\n–ù–æ–º–µ—Ä: {user_data[1]}\nProxy: {user_data[2]}, {user_data[3]}, {user_data[4]}\nPromo: {user_data[5]}\n{'-' * 55}\n")
        await message.answer(f"–£—Å–ø–µ—à–Ω–æ:\n{user_list}", reply_markup=keyboard)
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    else:
        await message.answer("‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ö†Ô∏è")
    
#2
@dp.message_handler(lambda message: message.text == '–í—ã–¥–∞—Ç—å 2 –ø—Ä–æ–∫—Å–∏')
async def handle_proxies_command(message: types.Message):   
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ \"id\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {2 –ø—Ä–æ–∫—Å–∏}:")
        await SomeState.Ogranich2.set()
        
@dp.message_handler(state=SomeState.Ogranich2)
async def handle_delete_proxy2(message: types.Message, state: FSMContext):
    db = sq.connect('new.db')
    cur = db.cursor()
    user_id = message.text
    what = cur.execute("SELECT 1 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
    if what != None:
        proxy_1 = cur.execute("SELECT proxy_1 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_1[0])  # Use proxy_1[0] to get the value from the fetched result
        proxy_2 = cur.execute("SELECT proxy_2 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_2[0])  # Use proxy_2[0] to get the value from the fetched result
        proxy_3 = cur.execute("SELECT proxy_3 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_3[0])  # Use proxy_3[0] to get the value from the fetched result
        prox2(user_id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        proxy_button = types.KeyboardButton(text="admin")
        keyboard.add(proxy_button)
        query = "SELECT user_id, number, proxy_1, proxy_2, proxy_3, promo FROM profile WHERE user_id = ?"
        user_data = cur.execute(query, (user_id,)).fetchone()
        user_list = (f"ID: {user_data[0]}\n–ù–æ–º–µ—Ä: {user_data[1]}\nProxy: {user_data[2]}, {user_data[3]}, {user_data[4]}\nPromo: {user_data[5]}\n{'-' * 55}\n")
        await message.answer(f"–£—Å–ø–µ—à–Ω–æ:\n{user_list}", reply_markup=keyboard)
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    else:
        await message.answer("‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ö†Ô∏è")
    
#3
@dp.message_handler(lambda message: message.text == '–í—ã–¥–∞—Ç—å 3 –ø—Ä–æ–∫—Å–∏')
async def handle_proxies_command(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ \"id\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {3 –ø—Ä–æ–∫—Å–∏}:")
        await SomeState.Ogranich3.set()
        
@dp.message_handler(state=SomeState.Ogranich3)
async def handle_delete_proxy3(message: types.Message, state: FSMContext) -> None:
    db = sq.connect('new.db')
    cur = db.cursor()
    user_id = message.text
    what = cur.execute("SELECT 1 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
    if what is not None:
        proxy_1 = cur.execute("SELECT proxy_1 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_1[0])  # Use proxy_1[0] to get the value from the fetched result
        proxy_2 = cur.execute("SELECT proxy_2 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_2[0])  # Use proxy_2[0] to get the value from the fetched result
        proxy_3 = cur.execute("SELECT proxy_3 FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        delete_proxy1(proxy_3[0])  # Use proxy_3[0] to get the value from the fetched result
        prox3(user_id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        proxy_button = types.KeyboardButton(text="admin")
        keyboard.add(proxy_button)
        user_data = cur.execute("SELECT user_id, number, proxy_1, proxy_2, proxy_3, promo FROM profile WHERE user_id = ?", (user_id,)).fetchone()
        user_list = f"ID: {user_data[0]}\n–ù–æ–º–µ—Ä: {user_data[1]}\n–ü—Ä–æ–∫—Å–∏: {user_data[2]}, {user_data[3]}, {user_data[4]}\n–ü—Ä–æ–º–æ–∫–æ–¥: {user_data[5]}\n{'-' * 55}\n"
        await message.answer(f"–£—Å–ø–µ—à–Ω–æ:\n{user_list}", reply_markup=keyboard)
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    else:
        await message.answer("‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ö†Ô∏è")



@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä')
async def DelNumbers(message: types.Message): 
    if message.from_user.id == admin_id:  
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
        await SomeState.DelNumber.set()

@dp.message_handler(state=SomeState.DelNumber)
async def handle_delete_proxy3(message: types.Message, state: FSMContext):
    number = message.text
    what = DeliteNumber(number)
    if what == "error":
        await message.answer("‚ö†Ô∏è–ù–æ–º–µ—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω‚ö†Ô∏è")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    else:
        await message.answer("–ù–æ–º–µ—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM


@dp.message_handler(lambda message: message.text == '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def handle_proxies_command(message: types.Message):
    if message.from_user.id == admin_id:
        db = sq.connect('new.db')
        cur = db.cursor()
        all_users = cur.execute("SELECT user_id,  number, proxy_1, proxy_2, proxy_3, promo, username FROM profile").fetchall()
        if all_users:
            user_list = "\n".join([f"–ò–º—è: {row[6]}\nid: {row[0]}\n–ù–æ–º–µ—Ä: {row[1]}\n–ü—Ä–æ–∫—Å–∏: {row[2]}, {row[3]}, {row[4]}\n–ü—Ä–æ–º–æ–∫–æ–¥: {row[5]}\n{ '-' * 55}\n" for row in all_users])
            await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–∫—Å–∏:\n{user_list}")
        else:
            await message.answer("‚ö†Ô∏è–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.‚ö†Ô∏è")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)